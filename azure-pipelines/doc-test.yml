## Specify which branches you want to trigger for continous deployment and/or applicable for pull requests.
## If nothing is selected, all branches are
trigger:
- azure

pr:
- azure


# Variable we can refernece later
variables:
  system.debug: 'true'
#  ref.data.home: '$(Agent.BuildDirectory)/tardis-refdata'

#  ref.data.github.url: 'https://github.com/Youssef15015/tardis-refdata.git'
  tardis.build.dir: $(Build.Repository.LocalPath)

jobs:

- job: 'Testing_Build_Documentation'
  pool:
    name: Linux

  steps:

#First generate ssh key and add to github as a deploy key to forked_repo_home/settings/deploy_key

# Secure files stored in the azure server are encryped and again decrypted by the azure task that uses the file
# Download a secure file to a temporary location on the build or release agent
  - task: DownloadSecureFile@1
    inputs: 
      secureFile: 'id_azure_rsa'

#Install an SSH key prior to a build or release
#This is needed to give azure access to deploy to github
#hostName is the line that was added to ~/.ssh/known_hosts when you added the RSA host key. (Output of ssh-keyscan, should look something like [1]As3..=ssh-rsa ..)
#sshPublicKey should be a string value of what is inside your .pub file (i.e: rsa-key Axddd... username@server)
#sshKey is the download secure file you generated.

  - task: InstallSSHKey@0
    inputs:
     hostName: 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
     sshPublicKey: $(public_key)
     #sshPassphrase: # Optional $(Agent.TempDirectory)
     sshKeySecureFile: 'id_azure_rsa'


  - bash: |
          ls
    displayName: Check contents of Vm


### See github.com/Youssef15015/tardis for documentation.
  - bash: |
        source activate tardis
        bash deploy_docs.sh
    displayName: 'TARDIS build and deployment to gh-pages'



#  - task: PublishTestResults@2
#    condition: succeededOrFailed()
#    inputs:
#      testResultsFiles: '**/test-*.xml'
#      testRunTitle: 'Test results for TARDIS on $(vm_Image)'

#  - task: PublishCodeCoverageResults@1
#    inputs:
#      codeCoverageTool: Cobertura
#      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
#      reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'